// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lianxiangcloud/linkchain/wallet/wallet (interfaces: BackendAPI)

// Package wallet is a generated GoMock package.
package wallet

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/lianxiangcloud/linkchain/libs/common"
	hexutil "github.com/lianxiangcloud/linkchain/libs/hexutil"
	rpc "github.com/lianxiangcloud/linkchain/libs/rpc"
	rtypes "github.com/lianxiangcloud/linkchain/rpc/rtypes"
	types "github.com/lianxiangcloud/linkchain/types"
	types0 "github.com/lianxiangcloud/linkchain/wallet/types"
	big "math/big"
	reflect "reflect"
)

// MockBackendAPI is a mock of BackendAPI interface
type MockBackendAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBackendAPIMockRecorder
}

// MockBackendAPIMockRecorder is the mock recorder for MockBackendAPI
type MockBackendAPIMockRecorder struct {
	mock *MockBackendAPI
}

// NewMockBackendAPI creates a new mock instance
func NewMockBackendAPI(ctrl *gomock.Controller) *MockBackendAPI {
	mock := &MockBackendAPI{ctrl: ctrl}
	mock.recorder = &MockBackendAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackendAPI) EXPECT() *MockBackendAPIMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockBackendAPI) Call(arg0 types0.CallArgs, arg1 string) (*hexutil.Bytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(*hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockBackendAPIMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockBackendAPI)(nil).Call), arg0, arg1)
}

// EstimateGas mocks base method
func (m *MockBackendAPI) EstimateGas(arg0 common.Address, arg1 uint64, arg2 *types.AccountDestEntry, arg3 types.UTXOKind, arg4 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockBackendAPIMockRecorder) EstimateGas(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockBackendAPI)(nil).EstimateGas), arg0, arg1, arg2, arg3, arg4)
}

// EthEstimateGas mocks base method
func (m *MockBackendAPI) EthEstimateGas(arg0 types0.CallArgs) (*hexutil.Uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthEstimateGas", arg0)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthEstimateGas indicates an expected call of EthEstimateGas
func (mr *MockBackendAPIMockRecorder) EthEstimateGas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthEstimateGas", reflect.TypeOf((*MockBackendAPI)(nil).EthEstimateGas), arg0)
}

// EthGetTransactionCount mocks base method
func (m *MockBackendAPI) EthGetTransactionCount(arg0 common.Address) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthGetTransactionCount", arg0)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthGetTransactionCount indicates an expected call of EthGetTransactionCount
func (mr *MockBackendAPIMockRecorder) EthGetTransactionCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthGetTransactionCount", reflect.TypeOf((*MockBackendAPI)(nil).EthGetTransactionCount), arg0)
}

// GenesisBlockNumber mocks base method
func (m *MockBackendAPI) GenesisBlockNumber() (*hexutil.Uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisBlockNumber")
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenesisBlockNumber indicates an expected call of GenesisBlockNumber
func (mr *MockBackendAPIMockRecorder) GenesisBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisBlockNumber", reflect.TypeOf((*MockBackendAPI)(nil).GenesisBlockNumber))
}

// GetBlockTransactionCountByHash mocks base method
func (m *MockBackendAPI) GetBlockTransactionCountByHash(arg0 common.Hash) (*hexutil.Uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByHash", arg0)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByHash indicates an expected call of GetBlockTransactionCountByHash
func (mr *MockBackendAPIMockRecorder) GetBlockTransactionCountByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByHash", reflect.TypeOf((*MockBackendAPI)(nil).GetBlockTransactionCountByHash), arg0)
}

// GetBlockTransactionCountByNumber mocks base method
func (m *MockBackendAPI) GetBlockTransactionCountByNumber(arg0 rpc.BlockNumber) (*hexutil.Uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByNumber", arg0)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByNumber indicates an expected call of GetBlockTransactionCountByNumber
func (mr *MockBackendAPIMockRecorder) GetBlockTransactionCountByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByNumber", reflect.TypeOf((*MockBackendAPI)(nil).GetBlockTransactionCountByNumber), arg0)
}

// GetBlockUTXO mocks base method
func (m *MockBackendAPI) GetBlockUTXO(arg0 *big.Int) (*rtypes.QuickRPCBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockUTXO", arg0)
	ret0, _ := ret[0].(*rtypes.QuickRPCBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockUTXO indicates an expected call of GetBlockUTXO
func (mr *MockBackendAPIMockRecorder) GetBlockUTXO(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockUTXO", reflect.TypeOf((*MockBackendAPI)(nil).GetBlockUTXO), arg0)
}

// GetBlockUTXOsByNumber mocks base method
func (m *MockBackendAPI) GetBlockUTXOsByNumber(arg0 *big.Int) (*rtypes.RPCBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockUTXOsByNumber", arg0)
	ret0, _ := ret[0].(*rtypes.RPCBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockUTXOsByNumber indicates an expected call of GetBlockUTXOsByNumber
func (mr *MockBackendAPIMockRecorder) GetBlockUTXOsByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockUTXOsByNumber", reflect.TypeOf((*MockBackendAPI)(nil).GetBlockUTXOsByNumber), arg0)
}

// GetChainVersion mocks base method
func (m *MockBackendAPI) GetChainVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainVersion indicates an expected call of GetChainVersion
func (mr *MockBackendAPIMockRecorder) GetChainVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainVersion", reflect.TypeOf((*MockBackendAPI)(nil).GetChainVersion))
}

// GetOutputsFromNode mocks base method
func (m *MockBackendAPI) GetOutputsFromNode(arg0 []uint64, arg1 common.Address) ([]*types.UTXORingEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputsFromNode", arg0, arg1)
	ret0, _ := ret[0].([]*types.UTXORingEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputsFromNode indicates an expected call of GetOutputsFromNode
func (mr *MockBackendAPIMockRecorder) GetOutputsFromNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputsFromNode", reflect.TypeOf((*MockBackendAPI)(nil).GetOutputsFromNode), arg0, arg1)
}

// GetRawTransactionByBlockHashAndIndex mocks base method
func (m *MockBackendAPI) GetRawTransactionByBlockHashAndIndex(arg0 common.Hash, arg1 hexutil.Uint) (hexutil.Bytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockHashAndIndex", arg0, arg1)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockHashAndIndex indicates an expected call of GetRawTransactionByBlockHashAndIndex
func (mr *MockBackendAPIMockRecorder) GetRawTransactionByBlockHashAndIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockHashAndIndex", reflect.TypeOf((*MockBackendAPI)(nil).GetRawTransactionByBlockHashAndIndex), arg0, arg1)
}

// GetRawTransactionByBlockNumberAndIndex mocks base method
func (m *MockBackendAPI) GetRawTransactionByBlockNumberAndIndex(arg0 rpc.BlockNumber, arg1 hexutil.Uint) (hexutil.Bytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockNumberAndIndex", arg0, arg1)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockNumberAndIndex indicates an expected call of GetRawTransactionByBlockNumberAndIndex
func (mr *MockBackendAPIMockRecorder) GetRawTransactionByBlockNumberAndIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockBackendAPI)(nil).GetRawTransactionByBlockNumberAndIndex), arg0, arg1)
}

// GetRawTransactionByHash mocks base method
func (m *MockBackendAPI) GetRawTransactionByHash(arg0 common.Hash) (hexutil.Bytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransactionByHash", arg0)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByHash indicates an expected call of GetRawTransactionByHash
func (mr *MockBackendAPIMockRecorder) GetRawTransactionByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByHash", reflect.TypeOf((*MockBackendAPI)(nil).GetRawTransactionByHash), arg0)
}

// GetTokenBalance mocks base method
func (m *MockBackendAPI) GetTokenBalance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenBalance indicates an expected call of GetTokenBalance
func (mr *MockBackendAPIMockRecorder) GetTokenBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalance", reflect.TypeOf((*MockBackendAPI)(nil).GetTokenBalance), arg0, arg1)
}

// GetTransactionByBlockHashAndIndex mocks base method
func (m *MockBackendAPI) GetTransactionByBlockHashAndIndex(arg0 common.Hash, arg1 hexutil.Uint) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByBlockHashAndIndex", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockHashAndIndex indicates an expected call of GetTransactionByBlockHashAndIndex
func (mr *MockBackendAPIMockRecorder) GetTransactionByBlockHashAndIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockHashAndIndex", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionByBlockHashAndIndex), arg0, arg1)
}

// GetTransactionByBlockNumberAndIndex mocks base method
func (m *MockBackendAPI) GetTransactionByBlockNumberAndIndex(arg0 rpc.BlockNumber, arg1 hexutil.Uint) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByBlockNumberAndIndex", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockNumberAndIndex indicates an expected call of GetTransactionByBlockNumberAndIndex
func (mr *MockBackendAPIMockRecorder) GetTransactionByBlockNumberAndIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionByBlockNumberAndIndex), arg0, arg1)
}

// GetTransactionByHash mocks base method
func (m *MockBackendAPI) GetTransactionByHash(arg0 common.Hash) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockBackendAPIMockRecorder) GetTransactionByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionByHash), arg0)
}

// GetTransactionCount mocks base method
func (m *MockBackendAPI) GetTransactionCount(arg0 common.Address, arg1 rpc.BlockNumber) (*hexutil.Uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", arg0, arg1)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount
func (mr *MockBackendAPIMockRecorder) GetTransactionCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionCount), arg0, arg1)
}

// GetTransactionReceipt mocks base method
func (m *MockBackendAPI) GetTransactionReceipt(arg0 common.Hash) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionReceipt", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt
func (mr *MockBackendAPIMockRecorder) GetTransactionReceipt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionReceipt), arg0)
}

// GetUTXOGas mocks base method
func (m *MockBackendAPI) GetUTXOGas() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUTXOGas")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUTXOGas indicates an expected call of GetUTXOGas
func (mr *MockBackendAPIMockRecorder) GetUTXOGas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUTXOGas", reflect.TypeOf((*MockBackendAPI)(nil).GetUTXOGas))
}

// IsContract mocks base method
func (m *MockBackendAPI) IsContract(arg0 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContract", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsContract indicates an expected call of IsContract
func (mr *MockBackendAPIMockRecorder) IsContract(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContract", reflect.TypeOf((*MockBackendAPI)(nil).IsContract), arg0)
}

// RefreshMaxBlock mocks base method
func (m *MockBackendAPI) RefreshMaxBlock() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshMaxBlock")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshMaxBlock indicates an expected call of RefreshMaxBlock
func (mr *MockBackendAPIMockRecorder) RefreshMaxBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshMaxBlock", reflect.TypeOf((*MockBackendAPI)(nil).RefreshMaxBlock))
}

// SendRawTransaction mocks base method
func (m *MockBackendAPI) SendRawTransaction(arg0 hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", arg0)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockBackendAPIMockRecorder) SendRawTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockBackendAPI)(nil).SendRawTransaction), arg0)
}

// SendRawUTXOTransaction mocks base method
func (m *MockBackendAPI) SendRawUTXOTransaction(arg0 hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawUTXOTransaction", arg0)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawUTXOTransaction indicates an expected call of SendRawUTXOTransaction
func (mr *MockBackendAPIMockRecorder) SendRawUTXOTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawUTXOTransaction", reflect.TypeOf((*MockBackendAPI)(nil).SendRawUTXOTransaction), arg0)
}

// Transfer mocks base method
func (m *MockBackendAPI) Transfer(arg0 []string) []types0.SendTxRet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0)
	ret0, _ := ret[0].([]types0.SendTxRet)
	return ret0
}

// Transfer indicates an expected call of Transfer
func (mr *MockBackendAPIMockRecorder) Transfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockBackendAPI)(nil).Transfer), arg0)
}
