// Code generated by MockGen. DO NOT EDIT.
// Source: nodeapi.go

// Package wallet is a generated GoMock package.
package wallet

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/lianxiangcloud/linkchain/libs/common"
	hexutil "github.com/lianxiangcloud/linkchain/libs/hexutil"
	rpc "github.com/lianxiangcloud/linkchain/libs/rpc"
	rtypes "github.com/lianxiangcloud/linkchain/rpc/rtypes"
	types "github.com/lianxiangcloud/linkchain/types"
	types0 "github.com/lianxiangcloud/linkchain/wallet/types"
	big "math/big"
	reflect "reflect"
)

// MockBackendAPI is a mock of BackendAPI interface
type MockBackendAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBackendAPIMockRecorder
}

// MockBackendAPIMockRecorder is the mock recorder for MockBackendAPI
type MockBackendAPIMockRecorder struct {
	mock *MockBackendAPI
}

// NewMockBackendAPI creates a new mock instance
func NewMockBackendAPI(ctrl *gomock.Controller) *MockBackendAPI {
	mock := &MockBackendAPI{ctrl: ctrl}
	mock.recorder = &MockBackendAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackendAPI) EXPECT() *MockBackendAPIMockRecorder {
	return m.recorder
}

// EthGetTransactionCount mocks base method
func (m *MockBackendAPI) EthGetTransactionCount(addr common.Address) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthGetTransactionCount", addr)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthGetTransactionCount indicates an expected call of EthGetTransactionCount
func (mr *MockBackendAPIMockRecorder) EthGetTransactionCount(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthGetTransactionCount", reflect.TypeOf((*MockBackendAPI)(nil).EthGetTransactionCount), addr)
}

// RefreshMaxBlock mocks base method
func (m *MockBackendAPI) RefreshMaxBlock() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshMaxBlock")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshMaxBlock indicates an expected call of RefreshMaxBlock
func (mr *MockBackendAPIMockRecorder) RefreshMaxBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshMaxBlock", reflect.TypeOf((*MockBackendAPI)(nil).RefreshMaxBlock))
}

// GetOutputsFromNode mocks base method
func (m *MockBackendAPI) GetOutputsFromNode(indice []uint64, tokenID common.Address) ([]*types.UTXORingEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputsFromNode", indice, tokenID)
	ret0, _ := ret[0].([]*types.UTXORingEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputsFromNode indicates an expected call of GetOutputsFromNode
func (mr *MockBackendAPIMockRecorder) GetOutputsFromNode(indice, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputsFromNode", reflect.TypeOf((*MockBackendAPI)(nil).GetOutputsFromNode), indice, tokenID)
}

// IsContract mocks base method
func (m *MockBackendAPI) IsContract(addr common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContract", addr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsContract indicates an expected call of IsContract
func (mr *MockBackendAPIMockRecorder) IsContract(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContract", reflect.TypeOf((*MockBackendAPI)(nil).IsContract), addr)
}

// EstimateGas mocks base method
func (m *MockBackendAPI) EstimateGas(from common.Address, nonce uint64, dest *types.AccountDestEntry, kind types.UTXOKind, tokenID common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", from, nonce, dest, kind, tokenID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockBackendAPIMockRecorder) EstimateGas(from, nonce, dest, kind, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockBackendAPI)(nil).EstimateGas), from, nonce, dest, kind, tokenID)
}

// GetTokenBalance mocks base method
func (m *MockBackendAPI) GetTokenBalance(addr, tokenID common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalance", addr, tokenID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenBalance indicates an expected call of GetTokenBalance
func (mr *MockBackendAPIMockRecorder) GetTokenBalance(addr, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalance", reflect.TypeOf((*MockBackendAPI)(nil).GetTokenBalance), addr, tokenID)
}

// Transfer mocks base method
func (m *MockBackendAPI) Transfer(txs []string) []types0.SendTxRet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", txs)
	ret0, _ := ret[0].([]types0.SendTxRet)
	return ret0
}

// Transfer indicates an expected call of Transfer
func (mr *MockBackendAPIMockRecorder) Transfer(txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockBackendAPI)(nil).Transfer), txs)
}

// GetChainVersion mocks base method
func (m *MockBackendAPI) GetChainVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainVersion indicates an expected call of GetChainVersion
func (mr *MockBackendAPIMockRecorder) GetChainVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainVersion", reflect.TypeOf((*MockBackendAPI)(nil).GetChainVersion))
}

// GetBlockUTXOsByNumber mocks base method
func (m *MockBackendAPI) GetBlockUTXOsByNumber(height *big.Int) (*rtypes.RPCBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockUTXOsByNumber", height)
	ret0, _ := ret[0].(*rtypes.RPCBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockUTXOsByNumber indicates an expected call of GetBlockUTXOsByNumber
func (mr *MockBackendAPIMockRecorder) GetBlockUTXOsByNumber(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockUTXOsByNumber", reflect.TypeOf((*MockBackendAPI)(nil).GetBlockUTXOsByNumber), height)
}

// GetUTXOGas mocks base method
func (m *MockBackendAPI) GetUTXOGas() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUTXOGas")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUTXOGas indicates an expected call of GetUTXOGas
func (mr *MockBackendAPIMockRecorder) GetUTXOGas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUTXOGas", reflect.TypeOf((*MockBackendAPI)(nil).GetUTXOGas))
}

// GetBlockTransactionCountByNumber mocks base method
func (m *MockBackendAPI) GetBlockTransactionCountByNumber(blockNr rpc.BlockNumber) (*hexutil.Uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByNumber", blockNr)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByNumber indicates an expected call of GetBlockTransactionCountByNumber
func (mr *MockBackendAPIMockRecorder) GetBlockTransactionCountByNumber(blockNr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByNumber", reflect.TypeOf((*MockBackendAPI)(nil).GetBlockTransactionCountByNumber), blockNr)
}

// GetBlockTransactionCountByHash mocks base method
func (m *MockBackendAPI) GetBlockTransactionCountByHash(blockHash common.Hash) (*hexutil.Uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByHash", blockHash)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByHash indicates an expected call of GetBlockTransactionCountByHash
func (mr *MockBackendAPIMockRecorder) GetBlockTransactionCountByHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByHash", reflect.TypeOf((*MockBackendAPI)(nil).GetBlockTransactionCountByHash), blockHash)
}

// GetTransactionByBlockNumberAndIndex mocks base method
func (m *MockBackendAPI) GetTransactionByBlockNumberAndIndex(blockNr rpc.BlockNumber, index hexutil.Uint) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByBlockNumberAndIndex", blockNr, index)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockNumberAndIndex indicates an expected call of GetTransactionByBlockNumberAndIndex
func (mr *MockBackendAPIMockRecorder) GetTransactionByBlockNumberAndIndex(blockNr, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionByBlockNumberAndIndex), blockNr, index)
}

// GetTransactionByBlockHashAndIndex mocks base method
func (m *MockBackendAPI) GetTransactionByBlockHashAndIndex(blockHash common.Hash, index hexutil.Uint) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByBlockHashAndIndex", blockHash, index)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockHashAndIndex indicates an expected call of GetTransactionByBlockHashAndIndex
func (mr *MockBackendAPIMockRecorder) GetTransactionByBlockHashAndIndex(blockHash, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockHashAndIndex", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionByBlockHashAndIndex), blockHash, index)
}

// GetRawTransactionByBlockNumberAndIndex mocks base method
func (m *MockBackendAPI) GetRawTransactionByBlockNumberAndIndex(blockNr rpc.BlockNumber, index hexutil.Uint) (hexutil.Bytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockNumberAndIndex", blockNr, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockNumberAndIndex indicates an expected call of GetRawTransactionByBlockNumberAndIndex
func (mr *MockBackendAPIMockRecorder) GetRawTransactionByBlockNumberAndIndex(blockNr, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockBackendAPI)(nil).GetRawTransactionByBlockNumberAndIndex), blockNr, index)
}

// GetRawTransactionByBlockHashAndIndex mocks base method
func (m *MockBackendAPI) GetRawTransactionByBlockHashAndIndex(blockHash common.Hash, index hexutil.Uint) (hexutil.Bytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockHashAndIndex", blockHash, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockHashAndIndex indicates an expected call of GetRawTransactionByBlockHashAndIndex
func (mr *MockBackendAPIMockRecorder) GetRawTransactionByBlockHashAndIndex(blockHash, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockHashAndIndex", reflect.TypeOf((*MockBackendAPI)(nil).GetRawTransactionByBlockHashAndIndex), blockHash, index)
}

// GetTransactionCount mocks base method
func (m *MockBackendAPI) GetTransactionCount(address common.Address, blockNr rpc.BlockNumber) (*hexutil.Uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", address, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount
func (mr *MockBackendAPIMockRecorder) GetTransactionCount(address, blockNr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionCount), address, blockNr)
}

// GetTransactionByHash mocks base method
func (m *MockBackendAPI) GetTransactionByHash(hash common.Hash) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", hash)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockBackendAPIMockRecorder) GetTransactionByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionByHash), hash)
}

// GetRawTransactionByHash mocks base method
func (m *MockBackendAPI) GetRawTransactionByHash(hash common.Hash) (hexutil.Bytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransactionByHash", hash)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByHash indicates an expected call of GetRawTransactionByHash
func (mr *MockBackendAPIMockRecorder) GetRawTransactionByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByHash", reflect.TypeOf((*MockBackendAPI)(nil).GetRawTransactionByHash), hash)
}

// GetTransactionReceipt mocks base method
func (m *MockBackendAPI) GetTransactionReceipt(hash common.Hash) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionReceipt", hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt
func (mr *MockBackendAPIMockRecorder) GetTransactionReceipt(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockBackendAPI)(nil).GetTransactionReceipt), hash)
}

// EthEstimateGas mocks base method
func (m *MockBackendAPI) EthEstimateGas(args types0.CallArgs) (*hexutil.Uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthEstimateGas", args)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthEstimateGas indicates an expected call of EthEstimateGas
func (mr *MockBackendAPIMockRecorder) EthEstimateGas(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthEstimateGas", reflect.TypeOf((*MockBackendAPI)(nil).EthEstimateGas), args)
}

// SendRawTransaction mocks base method
func (m *MockBackendAPI) SendRawTransaction(encodedTx hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", encodedTx)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockBackendAPIMockRecorder) SendRawTransaction(encodedTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockBackendAPI)(nil).SendRawTransaction), encodedTx)
}

// SendRawUTXOTransaction mocks base method
func (m *MockBackendAPI) SendRawUTXOTransaction(encodedTx hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawUTXOTransaction", encodedTx)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawUTXOTransaction indicates an expected call of SendRawUTXOTransaction
func (mr *MockBackendAPIMockRecorder) SendRawUTXOTransaction(encodedTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawUTXOTransaction", reflect.TypeOf((*MockBackendAPI)(nil).SendRawUTXOTransaction), encodedTx)
}

// GetBlockUTXO mocks base method
func (m *MockBackendAPI) GetBlockUTXO(height *big.Int) (*rtypes.QuickRPCBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockUTXO", height)
	ret0, _ := ret[0].(*rtypes.QuickRPCBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockUTXO indicates an expected call of GetBlockUTXO
func (mr *MockBackendAPIMockRecorder) GetBlockUTXO(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockUTXO", reflect.TypeOf((*MockBackendAPI)(nil).GetBlockUTXO), height)
}

// GenesisBlockNumber mocks base method
func (m *MockBackendAPI) GenesisBlockNumber() (*hexutil.Uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisBlockNumber")
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenesisBlockNumber indicates an expected call of GenesisBlockNumber
func (mr *MockBackendAPIMockRecorder) GenesisBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisBlockNumber", reflect.TypeOf((*MockBackendAPI)(nil).GenesisBlockNumber))
}
