// Code generated by mockery v1.0.0. DO NOT EDIT.

package app

import (
	common "github.com/lianxiangcloud/linkchain/libs/common"
	cryptonotetypes "github.com/lianxiangcloud/linkchain/libs/cryptonote/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/lianxiangcloud/linkchain/types"
)

// Mempool is an autogenerated mock type for the Mempool type
type Mempool struct {
	mock.Mock
}

// GetTxFromCache provides a mock function with given fields: _a0
func (_m *Mempool) GetTxFromCache(_a0 common.Hash) types.Tx {
	ret := _m.Called(_a0)

	var r0 types.Tx
	if rf, ok := ret.Get(0).(func(common.Hash) types.Tx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Tx)
		}
	}

	return r0
}

// KeyImageExists provides a mock function with given fields: key
func (_m *Mempool) KeyImageExists(key cryptonotetypes.Key) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(cryptonotetypes.Key) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KeyImagePush provides a mock function with given fields: key
func (_m *Mempool) KeyImagePush(key cryptonotetypes.Key) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(cryptonotetypes.Key) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KeyImageRemoveKeys provides a mock function with given fields: _a0
func (_m *Mempool) KeyImageRemoveKeys(_a0 []*cryptonotetypes.Key) {
	_m.Called(_a0)
}

// KeyImageReset provides a mock function with given fields:
func (_m *Mempool) KeyImageReset() {
	_m.Called()
}

// Lock provides a mock function with given fields:
func (_m *Mempool) Lock() {
	_m.Called()
}

// Reap provides a mock function with given fields: maxTxs
func (_m *Mempool) Reap(maxTxs int) types.Txs {
	ret := _m.Called(maxTxs)

	var r0 types.Txs
	if rf, ok := ret.Get(0).(func(int) types.Txs); ok {
		r0 = rf(maxTxs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Txs)
		}
	}

	return r0
}

// Unlock provides a mock function with given fields:
func (_m *Mempool) Unlock() {
	_m.Called()
}

// Update provides a mock function with given fields: height, txs
func (_m *Mempool) Update(height uint64, txs types.Txs) error {
	ret := _m.Called(height, txs)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, types.Txs) error); ok {
		r0 = rf(height, txs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
